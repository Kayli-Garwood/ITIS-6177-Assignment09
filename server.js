const express = require('express');
const app = express();
const axios = require('axios');
const port = 3000;

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const mariadb = require('mariadb');
const pool = mariadb.createPool({
	host: 'localhost',
	user:'root',
	password: 'root',
	database: 'sample',
	port: 3306,
	connectionLimit: 5
});
 
var corsOptions = {   origin: '104.248.53.132:3000',   optionsSuccessStatus: 200 }
const options = {
	swaggerDefinition: {
		info: {
			title: 'Assignment 08',
			version: '1.0.0',
			description: 'Assignment 08 API autogenerated by Kayli Garwood'
		},
		host: '104.248.53.132:3000',
		basePath: '/',
		},
		apis: ['./server.js'],
};

const specs = swaggerJsdoc(options);
app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors(corsOptions));


/**  
* @swagger
* /insertAgents:  
*    post:
*       description: Insert a new agent into the agents table   
*       produces:  
*          - application/json  
*       responses:  
*          200:  
*              description: mySQL INSERT statement adding the information to the table 'agents' to the database 'sample' 
*  
*/

app.post("/insertAgents", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "INSERT INTO agents (agent_code, agent_name, working_area, commission, phone_no, country) VALUES ('A013', 'XYZ', 'Torento', '0.11', '012-34567890', '\r')";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			//throw err;
			res.send(err);
		} finally {
	if (conn) return conn.release();
}
});

/** 
* @swagger 
* /insertCompany: 
*    post: 
*       description: Insert a new company into the company table 
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL INSERT INTO statement adding data for the table 'customers' in the database 'sample' 
* 
*/

app.post("/insertCompany", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "INSERT INTO company (company_id, company_name, company_city) VALUES ('20','Cookout', 'Charlotte\r')";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			//throw err;
			res.send(err);
		} finally {
	if (conn) return conn.release();
}
});

/** 
* @swagger 
* /studentName: 
*    patch: 
*       description: Updating the student name in the student table where rollid is 2
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL UPDATE statement updating the information in the table 'student' to the database 'sample' 
* 
*/

app.patch("/studentName", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "UPDATE student SET name = 'David' WHERE rollid='2'";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			res.send(err)
			//throw err;
		} finally {
	if (conn) return conn.release();
}
});

/** 
* @swagger 
* /customerUpdate: 
*    patch: 
*       description: Updating the customer name to Nick where cust_city is Torento
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL UPDATE statement updating the cust_name to Nick in the table 'customer' where cust_city is Torento to the database 'sample' 
* 
*/

app.patch("/customerUpdate", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "UPDATE customer SET cust_name = 'Nick' WHERE cust_city='Torento'";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			res.send(err)
			//throw err;
		} finally {
	if (conn) return conn.release();
}
});

/** 
* @swagger 
* /listUpdate: 
*    put: 
*       description: Updating the item name in listofitem table where itemcode is I002 
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL UPDATE statement updating the information in the table 'listofitem' to the database 'sample' 
* 
*/

app.put("/listUpdate", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "UPDATE listofitem SET itemname = 'MILK' WHERE itemcode = 'I002'";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			res.send(err);
			//throw err;
		} finally {
	if (conn) return conn.release();
}
});

/** 
* @swagger 
* /foodUpdate:
*    put: 
*       description: Updating the item unti in the foods table where company_id is 15\r
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL UPDATE statement updating the information in the table 'foods' where the company_id is 15\r to have the item_unit of abc all in the database 'sample' 
* 
*/


app.put("/foodUpdate", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "UPDATE foods SET item_unit = 'abc' WHERE company_id = '15\r'";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			res.send(err);
			//throw err;
		} finally {
	if (conn) return conn.release();
}
});

/**
* @swagger 
* /deleteCustomers: 
*    delete: 
*       description: Deleting from the customer table where the cust_code is C00011 
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL DELETE statement deleting information from the table 'customer' from the database 'sample' 
* 
*/

app.delete("/deleteCustomers", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "DELETE FROM customer WHERE cust_code = 'C00011'";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			res.send(err);
			//throw err;
		} finally {
	if (conn) return conn.release();
}
});

/** 
* @swagger 
* /deleteOrders: 
*    delete: 
*       description: Deleting from the orders table where ord_amount is greater than or equal to 3000 
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL DELETE statement deleting information from the table 'orders' if the ord_amount is greather than or equal to 3000 from the database 'sample' 
* 
*/

app.delete("/deleteOrders", async (req, res) => {
	let conn;
	try {
	conn = await pool.getConnection();
	var query = "DELETE FROM orders WHERE ord_amount >= 3000.00";
	var rows = await conn.query(query);
	res.json(rows);
		} catch (err) {
			res.send(err);
		} finally {
	if (conn) return conn.release();
}
});


/** 
* @swagger 
* /customers: 
*    get: 
*       description: Select and display all information from the customer table 
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL SELECT statement selecting and displaying all information from the table 'customers' in the database 'sample'
*
*/

app.get("/customers", async (req, res) => {
	let conn;
  	try { 
	conn = await pool.getConnection();
	var query = "SELECT * FROM customer";
	var rows = await conn.query(query);
	res.json(rows);
     		} catch (err) {
			res.send(err);
 		    //throw err;     
		} finally {
         if (conn) return conn.release();     
} 
});

/**
* @swagger 
* /agents:working_area: 
*    get: 
*       description: Select and display all information from the agents table where working_area is Bangalore
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL SELECT statement selecting from the table 'agents' where working_area is Bangalore from the database 'sample' 
* 
*/

app.get("/agents:working_area", async (req, res) => {
	let conn;
	try {
		conn = await pool.getConnection();
		var query = "SELECT * FROM agents WHERE working_area = 'Bangalore'";
		var rows = await conn.query(query);
		res.json(rows);
		} catch (err) {
			throw err;
		} finally {
	if (conn) return conn.release();
}
});

/** 
* @swagger 
* /orders:ord_amount: 
*    get: 
*       description: Select and display information from the orders table and order by the ord_amount ascending and ord_date descending 
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL ORDER BY statement selecting and ordering information from the table 'orders' by ord_amount ASC and ord_date DESC in the database 'sample' 
* 
*/

app.get("/orders:ord_amount", async (req, res) => {
         let conn;
         try {
         	conn = await pool.getConnection();
                var query = "SELECT * FROM orders ORDER BY ord_amount ASC, ord_date DESC";  
		var rows = await conn.query(query);
                res.json(rows);
                } catch (err) {
                         throw err;
                } finally {         
			if (conn) return conn.release(); 
} 
});

/** 
* @swagger 
* /daysorder:advance_amount: 
*    get: 
*       description: selecting from the table daysorder and displaying results only where the ord_amount is greater than 3000 or the advance_amount is less than or equal to 1000 
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL OR statement selecting from the table 'daysorder' and displaying if the ord_amount is greater than 3000 or the advance_amount is less than or equal to 1000 from the database 'sample'
* 
*/
 
app.get("/daysorder:advance_amount", async (req, res) => {
	let conn;
	try {
		conn = await pool.getConnection();
		var query = "SELECT * FROM daysorder WHERE ord_amount > '3000.00' OR advance_amount <= '1000.00'";
		var rows = await conn.query(query);
		res.json(rows);
		} catch (err) {
			throw err;
		} finally {
			if (conn) return conn.release();
}
});

/** 
* @swagger 
* /cust_code: 
*    get: 
*       description: Selecting cust_code from the customer table and combining it with cust_code from the daysorder table and ordering it by cust_code
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL UNION statement combining the tables 'customer' and 'daysorder' by there individual cust_code and ordering it by cust_code all from the database 'sample' 
* 
*/

app.get("/cust_code", async (req, res) => {
	let conn;
	try {
		conn = await pool.getConnection();
		var query = "SELECT cust_code FROM customer UNION SELECT cust_code FROM daysorder ORDER BY cust_code";
		var rows = await conn.query(query);
		res.json(rows);
		} catch (err) {
			throw err;
		} finally {
			if (conn) return conn.release();
}
});

/** 
* @swagger 
* /ord_num:count: 
*    get: 
*       description: Counting all the ord_num from the orders table
*       produces: 
*          - application/json 
*       responses: 
*          200: 
*              description: mySQL COUNT statement counting all the ord_num information from the table 'orders' from the database 'sample'
* 
*/

app.get("/ord_num:count", async (req, res) => {
	let conn;
	try {
		conn = await pool.getConnection();
		var query = "SELECT COUNT(ord_num) FROM orders";
		var rows = await conn.query(query);
		res.json(rows);
		} catch (err) {
			throw err;
		} finally {
			if (conn) return conn.release();
}
});

app.get("/say", (req, res) => {
	console.log(req.query);
	axios.get(`https://pmg03w6c0k.execute-api.us-east-2.amazonaws.com/myFunction?keyword=${req.query.keyword}`)
	.then((response) => {
	console.log(response.data);
		res.send(response.data);
	});

});



app.listen(port, () => {
	console.log(`Example app listening at http://localhost:${port}`)
});
